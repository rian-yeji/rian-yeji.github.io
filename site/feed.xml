<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centrarium</title>
    <description>A simple yet classy theme for your Jekyll website or blog.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 May 2019 22:53:46 +0900</pubDate>
    <lastBuildDate>Tue, 21 May 2019 22:53:46 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Apache Kafka 다운로드 및 실행</title>
        <description>&lt;p&gt;이번년도 3월부터 한이음멘토링을 진행하며 화상회의 프로그램 개발을 주제로 잡았는데 그 중 채팅기능을 구현할때 보다 높은 성능을 위해 Apache Kafka를 적용해보기로 했고 이에따라 처음 카프카 시작하기위한 설치과정과 cmd로 실행하여 consumer와 producer가 메시지를 주고받는 기능까지 실습해보았다.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;[목차]
&lt;br /&gt;
&lt;a href=&quot;#first&quot; text-decoration:none=&quot;&quot;&gt;1. Kafka란?&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#second&quot; text-decoration:none=&quot;&quot;&gt;2. Kafka 다운로드 및 실행&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;first&quot;&gt;1. Kafka란?&lt;/h1&gt;
&lt;p&gt;
Apache Kafka는 아파치 소프트웨어 재단이 스칼라로 개발한 오픈 소스 메시지 브로커 프로젝트이다. 이 프로젝트는 실시간 데이터 피드를 관리하기 위해 통일된, 높은 스루풋의 낮은 레이턴시를 지닌 플랫폼을 제공하는 것이 목표이다.
&lt;/p&gt;

&lt;h5&gt;#카프카는 일반적으로 두 가지의 광범위한 종류의 응용 프로그램에 사용된다.&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;1. 시스템 또는 응용 프로그램간에 데이터를 안정적으로 얻는 실시간 스트리밍 데이터 파이프 라인 구축&lt;/li&gt;
&lt;li&gt;2. 데이터 스트림을 변환하거나 이에 반응하는 실시간 스트리밍 애플리케이션 구축&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;#카프카의 기본 개념&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;1. Kafka는 여러 데이터 센터로 확장 될 수있는 하나 이상의 서버에서 클러스터로 실행된다.&lt;/li&gt;
&lt;li&gt;2. 카프카 클러스터는 주제(topic)라는 카테고리에 레코드 스트림을 저장한다.&lt;/li&gt;
&lt;li&gt;3. 각 레코드는 키, 값 및 타임 스탬프로 구성된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;#카프카가 제공하는 핵심 API&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/image/kafka_post/kafka-apis.png&quot; width=&quot;600px&quot; height=&quot;500px&quot; /&gt;
&lt;br /&gt;
출처: &lt;a href=&quot;https://kafka.apache.org/intro&quot;&gt;https://kafka.apache.org/intro&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;li&gt;Producer API&lt;br /&gt;
한 개 이상의 topic에 스트림을 게시 할 수있는 응용 프로그램을 제작&lt;/li&gt;
&lt;li&gt;Consumer API&lt;br /&gt;
한 개 이상의 topic을 구독하고 생성된 레코드 스트림을 처리&lt;/li&gt;
&lt;li&gt;Streams API&lt;br /&gt;
한 개 이상의 topic에서 입력 스트림을 소비하고 출력 스트림을 생성&lt;br /&gt;
효과적으로 입력 스트림을 출력 스트림으로 변환 할 수 있음&lt;/li&gt;
&lt;li&gt;Connector API&lt;br /&gt;
kafka에 기록된 데이터를 기존 응용 프로그램 또는 DB에 연결하는 재사용 가능한 Producer 또는 Consumer를 구축 및 실행할 수 있음&lt;/li&gt;

&lt;h1 id=&quot;second&quot;&gt;2. Kafka 다운로드 및 실행&lt;/h1&gt;
&lt;h5&gt;#아파치 카프카 설치&lt;/h5&gt;
&lt;p&gt;아파치 카프카는 아파치 공식 홈페이지(&lt;a href=&quot;https://kafka.apache.org/downloads&quot;&gt;https://kafka.apache.org/downloads&lt;/a&gt;)에서 원하는 버전을 다운로드하거나, 다음 링크에서 2.2.0파일을 바로 받아서 압축만 풀면 되므로 굉장히 간단하다.
&lt;a href=&quot;http://mirror.navercorp.com/apache/kafka/2.2.0/kafka_2.12-2.2.0.tgz&quot;&gt;http://mirror.navercorp.com/apache/kafka/2.2.0/kafka_2.12-2.2.0.tgz&lt;/a&gt;
&lt;br /&gt;
해당 포스팅은 Window10기반으로 작성되었다.&lt;/p&gt;

&lt;h5&gt;#아파치 카프카 실행&lt;/h5&gt;
&lt;p&gt;설치가 간편했던 것에 비해 실행은 과정이 조금 많은데, Apache Kafka는 zookeeper라고 하는 오픈소스 분산형 구성 서비스 위에서 돌아 가기 때문에 zookeeper를 먼저 실행 해 주어야 한다.&lt;/p&gt;

&lt;h6&gt;#Zookeeper 실행&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; cd kafka압축해제경로\bin\windows&lt;/b&gt;
&lt;br /&gt;
&lt;b&gt; &amp;gt;&lt;/b&gt;
&lt;br /&gt;
&lt;b&gt; &amp;gt; -server-start.bat ../../config/zookeeper.properties&lt;/b&gt;
&lt;br /&gt;
&lt;img src=&quot;/image/kafka_post/zookeeper_execute.PNG&quot; width=&quot;700px&quot; height=&quot;200px&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 새로운 cmd창을 열어서 kafka server를 실행한다.&lt;/p&gt;

&lt;h6&gt;#Kafka server 실행&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; cd kafka압축해제경로\bin\windows&lt;/b&gt;
&lt;br /&gt;
&lt;b&gt; &amp;gt;&lt;/b&gt;
&lt;br /&gt;
&lt;b&gt; &amp;gt; kafka-server-start.bat ....\config\server.properties&lt;/b&gt;
&lt;img src=&quot;/image/kafka_post/kafka_server.PNG&quot; width=&quot;700px&quot; height=&quot;200px&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;#Topic 생성&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; kafka-topics.bat –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic [토픽명]&lt;/b&gt;&lt;/p&gt;

&lt;h6&gt;#Topic list 확인&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; kafka-topics.bat –list –zookeeper localhost:2181&lt;/b&gt;&lt;/p&gt;

&lt;h6&gt;#Consumer&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic [토픽명]&lt;/b&gt;&lt;/p&gt;

&lt;h6&gt;#Producer&lt;/h6&gt;
&lt;p&gt;&lt;b&gt; &amp;gt; bin\windows\kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic [토픽명]
&lt;/b&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 17 May 2019 04:30:00 +0900</pubDate>
        <link>http://localhost:4000/kafka/2019/05/17/windows-kafka.html</link>
        <guid isPermaLink="true">http://localhost:4000/kafka/2019/05/17/windows-kafka.html</guid>
        
        <category>Kafka</category>
        
        
        <category>Kafka</category>
        
      </item>
    
      <item>
        <title>Jekyll 로컬에서 실행하기</title>
        <description>&lt;p&gt;요즘 개발자들 사이에서 git블로그가 유행함에 따라 보다 간편하게 블로그 작성을 할 수 있도록 로컬에서 작업하는 방법을 설명한다.&lt;/p&gt;

&lt;p&gt;지킬 기반의 블로그를 수정할 때 커밋하지 않고도 수정사항을 로컬상에서 작업하며 확인할 수 있는데 이를 수행하기 위해서는 몇가지 설치과정을 거쳐야한다.&lt;/p&gt;

&lt;p&gt;해당 포스팅은 Window10기반으로 작성되었다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h3&gt;1.루비(Ruby) 설치&lt;/h3&gt;
&lt;p&gt;Jekyll은 Ruby 기반으로 만들어졌기 때문에 로컬에서 Jekyll을 실행하려면 선행적으로 루비가 설치되어있어야 한다.

루비 인스톨러의 다운로드 페이지에서 자신의 운영체제에 맞는 루비+개발자킷(DevKit)설치 프로그램을 다운로드 후 설치한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/Jekyll_post/ruby_install.PNG&quot; width=&quot;200px&quot; height=&quot;450px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;별도의 설정없이 모두 기본으로 설치하였다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;2.지킬(Jekyll) 설치&lt;/h3&gt;
&lt;p&gt;루비 설치가 완료되면 윈도우 검색창에서 'Ruby'를 검색하여 Start Command Prompt with Ruby를 실행한다.
루비 콘솔창에서 `gem`명령어를 통해 지킬과 관련 패키지들을 설치한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minima&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tzinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;3.로컬에서 블로그 실행&lt;/h3&gt;
&lt;p&gt;루비 콘솔창에서 블로그의 깃허브 저장소와 연동된 폴더로 이동하고 지킬을 실행하면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그런데 이 때 윈도우상에서는 아래와 같은 인코딩에러가 발생 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/Jekyll_post/jekyll_error.PNG&quot; whidth=&quot;500px&quot; height=&quot;150px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;이럴때는 다음과 같은 코드를 먼저 실행한 뒤 지킬을 실행하면된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65001&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/image/Jekyll_post/jekyll_serve.PNG&quot; whidth=&quot;500px&quot; height=&quot;250px&quot; /&gt;
&lt;br /&gt;
이제 브라우저에서 &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;로 접속하면 로컬상에서 블로그 구현 결과를 확인 할 수 있다.
&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;4.수정사항 업로드(Git Kraken사용)&lt;/h3&gt;
&lt;p&gt;위의 과정은 로컬에서 블로그가 어떻게 구현되었나를 확인하기 위한 방법일 뿐이므로 실질적으로 구현한 내용을 블로그에 적용시키려면 꼭 내용을 commit하고 깃허브 저장소에 push해주어야한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/Jekyll_post/jekyll_upload.PNG&quot; whidth=&quot;800px&quot; height=&quot;500px&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고 사이트 : &lt;a href=&quot;https://shryu8902.github.io/jekyll/jekyll-on-windows/&quot;&gt;https://shryu8902.github.io/jekyll/jekyll-on-windows/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 10 May 2019 05:45:45 +0900</pubDate>
        <link>http://localhost:4000/jekyll/2019/05/10/jekyll-excute-local.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/2019/05/10/jekyll-excute-local.html</guid>
        
        <category>Jekyll</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;h2 id=&quot;adding-new-posts&quot;&gt;Adding New Posts&lt;/h2&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;h3 id=&quot;tags-and-categories&quot;&gt;Tags and Categories&lt;/h3&gt;

&lt;p&gt;If you list one or more categories or tags in the front matter of your post, they will be included with the post on the page as links. Clicking the link will bring you to an auto-generated archive page for the category or tag, created using the &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archive&lt;/a&gt; gem.&lt;/p&gt;

&lt;h3 id=&quot;cover-images&quot;&gt;Cover Images&lt;/h3&gt;

&lt;p&gt;To add a cover image to your post, set the “cover” property in the front matter with the relative URL of the image (i.e. &lt;code&gt;cover: &quot;/assets/cover_image.jpg&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; to add syntax highlight code snippets:&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;{% highlight &amp;lt;language&amp;gt; %}&lt;/code&gt; tag to add syntax highlighting to code snippets.&lt;/p&gt;

&lt;p&gt;For instance, this template…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% highlight javascript %}    
function demo(string, times) {    
  for (var i = 0; i &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;    
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endhighlight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…will come out looking like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Syntax highlighting is done using &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;. You can change the active theme in &lt;a href=&quot;https://github.com/bencentra/centrarium/blob/2dcd73d09e104c3798202b0e14c1db9fa6e77bc7/_includes/head.html#L15&quot;&gt;head.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Lightbox has been enabled for images. To create the link that’ll launch the lightbox, add &lt;code&gt;data-lightbox&lt;/code&gt; and &lt;code&gt;data-title&lt;/code&gt; attributes to an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag around your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. The result is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//bencentra.com/assets/images/falcon9_large.jpg&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;Check out the Falcon 9 from SpaceX&quot;&gt;
  &lt;img src=&quot;//bencentra.com/assets/images/falcon9_small.jpg&quot; title=&quot;Check out the Falcon 9 from SpaceX&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, check out the &lt;a href=&quot;http://lokeshdhakar.com/projects/lightbox2/&quot;&gt;Lightbox&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/jekyll/2015/04/18/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/2015/04/18/welcome-to-jekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>welcome</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
  </channel>
</rss>
